/*
 * Selling Partner API for Notifications
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, see the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package spapi.model.notifications;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * A notificationType specific filter. This object contains all of the currently available filters and properties that you can use to define a notificationType specific filter.
 */
@ApiModel(description = "A notificationType specific filter. This object contains all of the currently available filters and properties that you can use to define a notificationType specific filter.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-04-19T14:16:09.991+08:00")
public class EventFilter {
  @SerializedName("aggregationSettings")
  private AggregationSettings aggregationSettings = null;

  @SerializedName("marketplaceIds")
  private MarketplaceIds marketplaceIds = null;

  @SerializedName("eventFilterType")
  private String eventFilterType = null;

  public EventFilter aggregationSettings(AggregationSettings aggregationSettings) {
    this.aggregationSettings = aggregationSettings;
    return this;
  }

   /**
   * Get aggregationSettings
   * @return aggregationSettings
  **/
  @ApiModelProperty(value = "")
  public AggregationSettings getAggregationSettings() {
    return aggregationSettings;
  }

  public void setAggregationSettings(AggregationSettings aggregationSettings) {
    this.aggregationSettings = aggregationSettings;
  }

  public EventFilter marketplaceIds(MarketplaceIds marketplaceIds) {
    this.marketplaceIds = marketplaceIds;
    return this;
  }

   /**
   * Get marketplaceIds
   * @return marketplaceIds
  **/
  @ApiModelProperty(value = "")
  public MarketplaceIds getMarketplaceIds() {
    return marketplaceIds;
  }

  public void setMarketplaceIds(MarketplaceIds marketplaceIds) {
    this.marketplaceIds = marketplaceIds;
  }

  public EventFilter eventFilterType(String eventFilterType) {
    this.eventFilterType = eventFilterType;
    return this;
  }

   /**
   * An eventFilterType value that is supported by the specific notificationType. This is used by the subscription service to determine the type of event filter. Refer to the section of the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide) that describes the specific notificationType to determine if an eventFilterType is supported.
   * @return eventFilterType
  **/
  @ApiModelProperty(required = true, value = "An eventFilterType value that is supported by the specific notificationType. This is used by the subscription service to determine the type of event filter. Refer to the section of the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide) that describes the specific notificationType to determine if an eventFilterType is supported.")
  public String getEventFilterType() {
    return eventFilterType;
  }

  public void setEventFilterType(String eventFilterType) {
    this.eventFilterType = eventFilterType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventFilter eventFilter = (EventFilter) o;
    return Objects.equals(this.aggregationSettings, eventFilter.aggregationSettings) &&
        Objects.equals(this.marketplaceIds, eventFilter.marketplaceIds) &&
        Objects.equals(this.eventFilterType, eventFilter.eventFilterType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationSettings, marketplaceIds, eventFilterType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventFilter {\n");
    
    sb.append("    aggregationSettings: ").append(toIndentedString(aggregationSettings)).append("\n");
    sb.append("    marketplaceIds: ").append(toIndentedString(marketplaceIds)).append("\n");
    sb.append("    eventFilterType: ").append(toIndentedString(eventFilterType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

